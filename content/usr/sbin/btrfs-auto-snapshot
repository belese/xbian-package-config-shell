#!/bin/bash

# btrfs-auto-snapshot for Linux.
# Automatically create, rotate, and destroy periodic BTRFS snapshots.
# Copyright 2013 Matus Kral <matuskral@icloud.com>
#
# I'm trying to keep structure and reuse of zfs-auto-snapshot (zevo) version
# at https://github.com/mk01/zfs-auto-snapshot.git which is based on 
# original version developed by Darik Horn <dajhorn@vanadac.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

tmp_dir='/tmp/btrfs-snap'
opt_syslog=''
opt_dev=$(mount | grep " / " | awk '{print $1}')
opt_dry_run=''
opt_quiet=''
opt_verbose=''
opt_keep=''
opt_label='regular'
opt_prefix='btrfs-auto-snap'
opt_recursive=''
opt_sep='_'
opt_rootvolid='5'
opt_createdirs=''
opt_mountpoint=${tmp_dir}
#opt_snapdir='.btrfs/snapshot/'
opt_snapdir=''

# what is name for snapshot which is normaly mounted as running filesystem (if SUBVOL/@running, then use "@running")
opt_runningcopyin='@'

opt_delim='@'
opt_command='snapshot'
opt_vroot=''
opt_nocreate=''

SNAPSHOT_COUNT='0'
DESTROY_COUNT='0'
WARNING_COUNT='0'

print_usage ()
{
    echo "Usage: $0 command [options] <'//' | name [name...]>

    command            Is one of 

                             list, snapshot 
                             rename, destroy
                             listvol, rollback
                             createvol

                             xbiancopy
                            
                       If not given, snapshot is assumed.
    --dev              Device which is part of the btrfs filesystem (by default
                       is the one mounted as rootfs).
    -d, --debug        Print debugging messages.
    -n, --dry-run      Print actions without actually doing anything.
    -h, --help         Print this usage message.
    -k, --keep=NUM     Keep NUM recent snapshots and destroy older snapshots.
    -l, --label=LAB    LAB is usually 'hourly', 'daily', or 'monthly' (default
                       is 'regular').
    -p, --prefix=PRE   PRE is 'btrfs-auto-snap' by default.
    -e, --name         Snapshot name. If specified, -l and -p are overridden
                       and --keep is not considered.
    -q, --quiet        Suppress warnings and notices at the console.
    -s, --syslog       Write messages into the system log.
    -v, --verbose      Print info messages.
    -i, --rootvolid    ID of root volume. All actions are handled in this 
                       volume tree (default is 0)
    -m, --mountpoint   Dir used to mount rootvolid. By default ${tmp_dir}
    -t,--dirs          Create snapshot directories if needed.
    --no-create        Doesn't auto create fs on 'xbiancopy'.

      name           Filesystem and volume names, or '//' for all subvolumes.
" 
}

print_log () # level, message, ...
{
        LEVEL=$1
        shift 1

        case $LEVEL in
                (eme*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.emerge "$*"
                        echo Emergency: "$*" 1>&2
                        ;;
                (ale*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.alert "$*"
                        echo Alert: "$*" 1>&2
                        ;;
                (cri*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.crit "$*"
                        echo Critical: "$*" 1>&2
                        ;;
                (err*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.err "$*"
                        echo Error: "$*" 1>&2
                        ;;
                (war*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.warning "$*"
                        test -z "$opt_quiet" && echo Warning: "$*" 1>&2
                        WARNING_COUNT=$(( $WARNING_COUNT + 1 ))
                        ;;
                (not*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.notice "$*"
                        test -z "$opt_quiet" && echo "$*"
                        ;;
                (inf*)
                        # test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.info "$*"
                        test -n "$opt_verbose" && echo "$*"
                        ;;
                (deb*)
                        # test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.debug "$*"
                        test -n "$opt_debug" && echo Debug: "$*"
                        ;;
                (*)
                        test -n "$opt_syslog" && logger -t "$opt_prefix" "$*"
                        echo "$*" 1>&2
                        ;;
        esac
}

do_run () # [argv]
{
        if [ -n "$opt_dry_run" ]
        then
                echo "... Running $*"
                RC="$?"
        else
                eval $*
                RC="$?"
                if [ "$RC" -eq '0' ]
                then
                        print_log debug "$*"
                else
                        print_log warning "$* returned $RC"
                fi
        fi
        return "$RC"
}

do_destroy ()
{
        dSNAP="$1"
        dPATH=''
        dNAME=''

        dSNAP=$(eval echo "$1 | awk '{sub(/$opt_delim/,\"$opt_snapdir$opt_delim\")}; 1'")

        print_log debug "Destroying $opt_mountpoint/$dSNAP"
        if do_run "btrfs sub delete $opt_mountpoint/$dSNAP"; then
                DESTROY_COUNT=$(( $DESTROY_COUNT + 1 ))
        else
                WARNING_COUNT=$(( $WARNING_COUNT + 1 ))
        fi

}

do_snapshot ()
{

	for ii in $TARGETS
	do
		print_log debug "Snapshoting $ii."

		if [ ! -d $opt_mountpoint/$ii/$opt_snapdir -a -n "$opt_createdirs" ]; then
                        print_log debug "Creating snapshot directory for $ii."
                        mkdir -p $opt_mountpoint/$ii/$opt_snapdir
                fi
                if [ ! -d "$opt_mountpoint/$ii/$opt_snapdir$SNAPNAME" ]; then
                        tmp_runningcopyin=$opt_runningcopyin
                        z=$(findmnt | grep /$ii/ | awk '{print $2}'); z=${z##*\/}; z=${z%%]}
                        [ -n "$z" ] && tmp_runningcopyin=$z 
                        if do_run "btrfs sub snapshot $opt_mountpoint/$ii/$tmp_runningcopyin $opt_mountpoint/$ii/$opt_snapdir$SNAPNAME"; then
                                SNAPSHOT_COUNT=$(( $SNAPSHOT_COUNT + 1 ))
                        else
                                WARNING_COUNT=$(( $WARNING_COUNT + 1 ))
                        fi
                else
                        print_log warning "Snapshot or volume with this name already exists, skipping $ii/$opt_snapdir$SNAPNAME"
                fi

                KEEP="$opt_keep"
                test -z "$KEEP" && continue
                if [ "$ii" = "." ]; then
                        ii=""
                else
                        ii="$ii/"
                fi
                for jj in $SNAPSHOTS_OLD
                do
                        if [ -z "${jj#$ii$SNAPGLOB}" ]; then
                                KEEP=$(( $KEEP - 1 ))
                                test "$KEEP" -le '0' && do_destroy "$jj"
                        fi
                done

        done

}

do_rename () 
{
        dSNAP="$opt_mountpoint/$2"
        sSNAP="$opt_mountpoint/$1"

        dSNAP=$(eval echo "$dSNAP | awk '{sub(/$opt_delim/,\"$opt_snapdir$opt_delim\")}; 1'")
        sSNAP=$(eval echo "$sSNAP | awk '{sub(/$opt_delim/,\"$opt_snapdir$opt_delim\")}; 1'")

        sPATH=$(basename $sSNAP)
        sPATH=$(echo ${sSNAP%%$sPATH})

        dPATH=$(basename $dSNAP)
        dPATH=$(echo ${dSNAP%%$dPATH})

        print_log debug "Renaming from $sPATH to $dPATH"

        if [ "$sPATH" != "$dPATH" ]; then
                print_log error "Can't rename snapshot across volumes"
                exit 300
        elif [ -d "$dSNAP" ]; then
                print_log error "Destination name already exists!"
                exit 301
        elif [ ! -d "$sSNAP" ]; then
                print_log error "Source name does not exists!"
                exit 302
        else
                if do_run "mv $sSNAP $dSNAP"; then
                        print_log debug "Rename ok"
                else
                        WARNING_COUNT=$(( $WARNING_COUNT + 1 ))
                fi
        fi 

}

if [ "$#" -eq '0' ]; then
    print_log error "Argument list empty"
    exit 104
fi

stopt=${1%%-*}
if [ "$1" != '//' -a "$stopt" != '' ]; then
    opt_command="$1"
    shift 1
else
    opt_command='snapshot'
fi

GETOPT=$(getopt \
        --longoptions=label:,prefix:,verbose,debug,rootvolid:,mountdir:,dev:,dry-run,dirs,syslog,keep:,name:,no-create \
        --options=p:dvl:i:m:nhtsk:e: \
        -- "$@" ) \
        || exit 128

eval set -- ${GETOPT}

while [ "$#" -gt '0' ]
do
        case "$1" in
                (--no-create)
                        opt_nocreate='1'
                        shift 1
                        ;;
                (--dev)
                        opt_dev="$2"
                        shift 2
                        ;;
                (-e|--name)
                        opt_name="$2"
                        shift 2
                        ;;
                (-d|--debug)
                        opt_debug='1'
                        opt_quiet=''
                        opt_verbose='1'
                        shift 1
                        ;;
                (-n|--dry-run)
                        opt_dry_run='1'
                        shift 1
                        ;;
                (-p|--prefix)
                        opt_prefix="$2"
                        shift 2
                        ;;
                (-v|--verbose)
                        opt_verbose='1'
                        shift 1
                        ;;
                (-s|--syslog)
                        opt_syslog='1'
                        shift 1
                        ;;
                (-l|--label)
                        opt_label="$2"
                        shift 2
                        ;;
                (-k|--keep)
                        opt_keep="$2"
                        shift 2
                        ;;
                (-i|--rootvolid)
                        opt_rootvolid="$2"
                        shift 2
                        ;;
                (-m|--mountpoint)
                        opt_mountpoint="$2"
                        shift 2
                        ;;
                (--dirs|-t)
                        opt_createdirs='1'
                        shift 1
                        ;;
                (-h)
                        print_usage
                        shift 1
                        exit 
                        ;;
                (--)
                        shift 1
                        break
                        ;;
        esac
done

print_log debug "Using command $opt_command."

if [ "$#" -eq '0' ]; then
        if [ "$opt_command" != 'list' -a "$opt_command" != 'listvol' -a "$opt_command" != 'xbiancopy' ]; then
                print_log error "The filesystem argument list is empty."
                exit 133
        else
                set "//"
        fi
fi

if [ "$opt_delim" = '' ]; then
        print_log error "Snapshot's name first character can't be empty - can be longer than one character. Default shoul be '@'. Don't use this character in volume names afterwards."
        exit 134
fi

if [ -n "$opt_name" ]; then
        opt_prefix="$opt_name"
        opt_label=''
        opt_keep=''
fi

# ISO style date; fifteen characters: YYYY-MM-DD-HHMM
# On Solaris %H%M expands to 12h34.
DATE=$(date +%F-%H%M)

COUNTER='0'
while true; do
        if $(mkdir "${tmp_dir}" > /dev/null 2>&1); then 
                if ! $(mount -t btrfs -o subvolid=$opt_rootvolid $opt_dev $opt_mountpoint); then
                        print_log error "unable to mount the filesystem"
                        rmdir ${tmp_dir}
                        exit 100
                fi
                trap "btrfs  fi sync ${opt_mountpoint} > /dev/null; umount ${opt_mountpoint};rmdir '${tmp_dir}'" INT TERM EXIT
                break
        elif [ $opt_command = listvol ]; then
                break
        fi

        print_log error "another copy is running ... $COUNTER"
        test "$COUNTER" -gt '11' && exit 99
        sleep 5
        COUNTER=$(( $COUNTER + 1 ))
done

test -d $opt_mountpoint/$opt_snapdir && test -n "$opt_snapdir" && opt_vroot='1'

DATE=$(date +%F-%H%M)

# The snapshot name after the @ symbol.
SNAPNAME="$opt_delim$opt_prefix${opt_label:+$opt_sep$opt_label-$DATE}"

# The expression for matching old snapshots.  -YYYY-MM-DD-HHMM
SNAPGLOB="$opt_delim$opt_prefix${opt_label:+?$opt_label}????????????????"

BTRFS_LIST=$(btrfs sub list ${opt_mountpoint} | grep -v "/" | awk '{print $9}' | sort)  \
	|| { print_log error "unable to get list of volumes"; exit 102; }

BTRFS_LIST=$(printf "%s\n" "$BTRFS_LIST")
	test -n "$opt_vroot" && BTRFS_LIST=$(printf ".\n%s\n" "$BTRFS_LIST") 

case $opt_command in 
	(listvol|list|snapshot)
		# Count the number of times '//' appears on the command line.
		SLASHIES='0'
		for ii in "$@"
		do
			test "$ii" = '//' && SLASHIES=$(( $SLASHIES + 1 ))
		done

		if [ "$#" -gt '1' -a "$SLASHIES" -gt '0' ]
		then
			print_log error "The // must be the only argument if it is given."
			exit 134
		fi

		# Verify that each argument exists
		for ii in "$@"
		do
			test "$ii" = '//' && continue 1
			for jj in $BTRFS_LIST
			do
				test "$ii" = "$jj" && continue 2
			done
			print_log error "$ii is not existing volume."
			exit 138
		done

		TARGETS=''

		for ii in "$@"
		do
			if [ "$ii" = '//' ]; then
			    TARGETS=$BTRFS_LIST
			    continue
			fi
			TARGETS=$(printf "%s\n%s" $TARGETS $ii)  
		done
		;;
	(*)
		;;
esac

if [ -n "$opt_snapdir" ]; then 
    SNAPSHOTS_OLD=$(btrfs sub list ${opt_mountpoint} | sort -k9r | grep ${opt_snapdir}${opt_delim} | awk '{print $9}' | awk -F"$opt_snapdir" '{print $1 $2}') \
    || { print_log error "unable to get list of snapshots"; exit 103; }
else
    SNAPSHOTS_OLD=$(btrfs sub list ${opt_mountpoint} | sort -k9r | grep ${opt_delim} | awk '{print $9}') \
    || { print_log error "unable to get list of snapshots"; exit 103; }
fi

case $opt_command in
        (listvol)
                printf "%s\n" $BTRFS_LIST
                ;;
        (createvol)
                btrfs sub create ${opt_mountpoint}/$1
                ;;
        (list)
                for t in $TARGETS; do
                    printf "%s\n" $SNAPSHOTS_OLD | grep "$t/" | sort 
                done
                ;;
        (snapshot)
                do_snapshot
                print_log notice "$SNAPNAME," \
                        "$SNAPSHOT_COUNT created snapshots," \
                        "$DESTROY_COUNT destroyed snapshots," \
                        "$WARNING_COUNT warnings."
                ;;
        (destroy)
                do_destroy "$1"
                ;;
        (rename)
                do_rename "$1" "$2"
                ;;
        (rollback)
		tmpd=$(mktemp -u)
		tmpd=$(basename $tmpd)
		do_rename $(dirname $1)/@ $(dirname $1)/@$tmpd
		do_rename $1 $(dirname $1)/@
		do_rename $(dirname $1)/@$tmpd $1_rollback
                ;;
	(xbiancopy)
		[ $# -ne 2 ] && { echo "wrong aruments list"; exit 5; }
		if [ $opt_dev != $1 ]; then
		    [ ! -b $1 ] && echo "non existend source device" && exit 5
		    BTRFS_LIST=$(btrfs-auto-snapshot listvol --dev $1 //)
		fi
		mkdir /tmp/btrfs-source
		if [ $opt_dev != $1 ]; then
		    mount -t btrfs -o subvol=/ $1 /tmp/btrfs-source
		else
		    mount -o bind ${tmp_dir} /tmp/btrfs-source
		fi
		findmnt $2 >/dev/null && { umount $2 || { echo "can not umount destination partition"; exit 5; }; }
		[ -n "$opt_nocreate" ] || mkfs.btrfs -L xbian-copy -f $2
		mkdir -p /tmp/btrfs-dest
		mount -t btrfs -o subvol=/ $2 /tmp/btrfs-dest || { echo "can not mount destination partition"; exit 6; }
		for v in $BTRFS_LIST; do
		    btrfs sub create /tmp/btrfs-dest/$v
		    btrfs sub delete /tmp/btrfs-source/$v/@_ro > /dev/null 2>&1
		    btrfs sub snap -r /tmp/btrfs-source/$v/@ /tmp/btrfs-source/$v/@_ro
		    btrfs send -v /tmp/btrfs-source/$v/@_ro | btrfs receive -v /tmp/btrfs-dest/$v
		    btrfs sub snap /tmp/btrfs-dest/$v/@_ro /tmp/btrfs-dest/$v/@
		    btrfs sub delete /tmp/btrfs-dest/$v/@_ro
		    btrfs sub delete /tmp/btrfs-source/$v/@_ro
		done
		btrfs fi sync /tmp/btrfs-dest; umount /tmp/btrfs-dest; rmdir /tmp/btrfs-dest
		umount /tmp/btrfs-source; rmdir /tmp/btrfs-source
		echo ""
		echo "for users on xbian version below beta2 (beta1.1, beta1). beta2 handles this automaticaly."
		echo "/etc/fstab file needs to be adapted for /home to be mounted properly on the new xbian copy."
		echo "do the following steps:"
		echo "1) mount -t btrfs -o subvol=root/@ LABEL=xbian-copy /mnt"
		echo "2) nano /mnt/etc/fstab"
		echo "3) change all lines starting with LABEL=xbian-root-btrfs to LABEL=xbian-copy ....... "
		echo "4) umount /mnt"
		echo ""
		echo "for all users - change /boot/cmdline.txt if you want to boot from the copy just created. change root=LABEL=xbian-root-btrfs to root=LABEL=xbian-copy"
		;;
        (*)
                print_log error "Wrong command."
                exit 200
                ;;
esac

exit 0
