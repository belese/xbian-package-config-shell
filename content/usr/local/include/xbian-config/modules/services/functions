#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Get list of installed services
function getInstalledServicesFn() {
	for s in $(printf "%s\n" ${!SERVICES[@]} | sort ); do
		[ -z "$(find /etc/init.d -iname $s)" ] && [ ! -e /etc/init/$s.conf ] && unset SERVICES[$s]
	done
        X=$((${#SERVICES[@]}-1))
        IDX=($(printf "%s\n" ${!SERVICES[@]} | sort))
}

in_list() 
{
#        case $PROCESSES in
#                *" $1 "*)
#                        echo "$1 ok" >> /run/xbian-config
#                        return 0
#                        ;;
#        esac
#
#        echo "$1 nok" >> /run/xbian-config
        true
#        return 1
}

function getServiceAutoStartStatusFn() {
	[ -z "$1" ] && return 1
        [ $1 = samba ] && { grep RUN_MODE /etc/default/samba | grep -q inetd && return 0; }
        { grep -qx manual /etc/init/$1.override 2>/dev/null|| grep -qx manual /etc/init/$1.conf 2>/dev/null; } && return 1
        [ ! -e /etc/rc2.d/S??$1 -a ! -e /etc/rcS.d/S??$1 ] && [ ! -e /etc/init/$1.conf ] && return 1
	return 0
}

refreshProcessesFn()
{
        echo "Reloading process list" >> /run/xbian-splash
        PROCESSES=$(ps -e | awk 'ORS="\n"{print $4}')
}
function getServiceRunningStatusFn() {
        [ -z "$1" ] && return 2
        [ $1 = samba ] && { if grep RUN_MODE /etc/default/samba | grep -q inetd; then \
            getServiceRunningStatusFn "openbsd-inetd" && return 0 || return 1; 
        fi; }
        p=${SERVICES[$1]}

	[ -z "$PROCESSES" ] && refreshProcessesFn
	[ -z "$p" ] && { $(echo "$PROCESSES" | grep -q "$1") && return 0 || return 1; }
	for pn in $(echo $p| tr ',' '\n'); do 
                $(echo "$PROCESSES" | grep -q "$pn") || return 1
        done
        return 0
}

function getServiceNameFn() {
        NAME=$(echo ${IDX[$1]})
}

function getServiceIDFn() {
	I=0;
	for s in $(printf "%s\n" ${SERVIES[@]} | sort); do
                [ "$1" = $s ] && return $I
		I=$(($I+1));
	done
        return 999
}

function checkServiceExistsFn() {
	[ -e "/etc/init.d/$1" -o -e "/etc/init/$1.conf" ] && return 0
	return 1
}

function restartServiceFn() {

        echo "$NAME" $2 >> /run/xbian-config
        test -z "$2" && c="restart" || c="$2"

	if [ -f "/etc/init/$1.conf" ]; then
		[ $c = restart ] && c=reload
                $c -q $1
	else 
		/etc/init.d/$1 $c > /dev/null
        fi
        r=$?
        refreshProcessesFn
        return $r
}

function startServiceFn() {
        restartServiceFn $1 start
}

function stopServiceFn() {
        restartServiceFn $1 stop
}

function disableAutoStartFn() {
	if [ -f "/etc/init/$1.conf" ]; then
		echo "manual" >> "/etc/init/$1.override"
		grep -xq manual "/etc/init/$1.override"; return $?
        else
		insserv -rf "/etc/init.d/$1"  > /dev/null 2>&1; return $?
        fi
}

function enableAutoStartFn() {
	if [ -f "/etc/init/$1.conf" ]; then
		grep -xv manual "/etc/init/$1.override" > "/etc/init/$1.override.new"
		mv "/etc/init/$1.override.new" "/etc/init/$1.override"
		test $(grep -cvx manual "/etc/init/$1.override") -eq 0 && rm -f /etc/init/$1.override && return 0
		return $(grep -cx manual "/etc/init/$1.override")
        else
		insserv -f "/etc/init.d/$1" > /dev/null 2>&1; return $?
        fi
}

function getServiceConfFn() {
	DATA=();
        getServiceIDFn $1; I=$?
        DATA[0]=$1
	DATA[1]=${SERVICES[$1]}

        [ $I != 999 ] || return 1
        return 0 
}

function updateServiceConfFn() {
        [ -z "$1" ] && return 1
	if [ -f "$BASEPATH/config/services" ]; then
		sed -i "/$1:/d" $BASEPATH/config/services 
	fi
	echo "$1:$2" >> $BASEPATH/config/services;
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep -c "$1:$2" ) -eq 1 ]; then
		return 0;
	else
		return 1;
	fi
}

function deleteServiceFn() {
        [ -z "$1" ] && return 1
	if [ -f "$BASEPATH/config/services" ]; then
		sed -i "/$1:/d" $BASEPATH/config/services;
	fi
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep -c "$1:") -eq 0 ]; then
		return 0
	else
		return 1
	fi
}
