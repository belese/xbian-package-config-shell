#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Get list of installed services
function getInstalledServicesFn() {
	INSTSERV=();
	SERVLIST=($SERVICES);
	for SERVRAW in ${SERVLIST[@]}; do
		NAME=${SERVRAW%:*};
		FOUNDsysv=$(ls /etc/init.d/ | grep -io "^$NAME*");
		FOUNDupstart=$(initctl list | grep -e "xbmc .*");
		if [ -n "$FOUNDsysv" -o -n "$FOUNDupstart" ]; then
			INSTSERV+=($SERVRAW);
		fi
	done
}

function getServiceAutoStartStatusFn() {
	[ -z "$1" ] && return 0
        [ -e /etc/init/$1.override ] && return 0
        [ ! -e /etc/rc2.d/S??$1 -a ! -e /etc/init/$1.conf ] && return 0
	return 1
}

function getServiceRunningStatusFn() {
	SERVICE=$1
        getServiceIDFn $1
        SERVCONF=${aSERVICES[$?]}
	SERVCONF=${SERVCONF#*:}
        DAEMONS=${SERVCONF//,/\\n}
	DAEMONS=($(echo -e $DAEMONS))

	[ ${#DAEMONS[@]} -eq 0 ] && { pgrep $SERVICE > /dev/null && return 1 || return 0; }
	for pn in $DAEMONS; do pgrep $pn > /dev/null || return 0; done
        return 1
}

function getServiceNameFn() {
        SERVRAW=${aSERVICES[$1]}
        SERV=${SERVRAW%:*}
	NAME=$(find /etc/init.d/ -iname $SERV\* -printf '%P') 
        [ -z "$NAME" ] && NAME=$(find /etc/init/ -iname $SERV\. -printf '%P');
        NAME=${NAME%.conf}
}

function getServiceIDFn() {
	I=0;
	
	for SERVRAW in ${INSTSERV[@]}; do
		SERV=${SERVRAW%:*};

		if [ "$SERV" == "$1" ]; then
			return $I
		fi
		I=$(($I+1));
	done
        return -1
}

function checkServiceExistsFn() {
	[ -e "/etc/init.d/$1" -o -e "/etc/init/$1.conf" ] && return 1
	return 0
}

function restartServiceFn() {
	getServiceNameFn $1

        test -z "$2" && c="restart" || c=$2

	if [ -f "/etc/init.d/$NAME" ]; then
		service $NAME $c > /dev/null|| return $?
	else 
		$c -q $NAME || return $?
        fi

        return 0
}

function startServiceFn() {
        restartServiceFn $1 start
}

function stopServiceFn() {
        restartServiceFn $1 stop
}

function disableAutoStartFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		insserv -r "/etc/init.d/$NAME" || return $?
        else
		{ echo "manual" > "/etc/init/$NAME.override"; } || return $?
        fi
}

function enableAutoStartFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		insserv "/etc/init.d/$NAME" || return $?
        else
		rm -fr "/etc/init/$NAME.override" || return $?
        fi
}

function getServiceConfFn() {
	DATA=();
	I=0;

	for SERVRAW in ${INSTSERV[@]}; do
		if [ $I -eq $1 ]; then
			DATA[0]=${SERVRAW%:*}
			DATA[1]=${SERVRAW#*:}
			break;
		fi 
		I=$(($I+1))
	done
}

function updateServiceConfFn() {
	DATA=($2);
	if [ -f "$BASEPATH/config/services" ]; then
		sed -i "/${DATA[0]}:/d" $BASEPATH/config/services;
	fi
	echo "${DATA[0]}:${DATA[1]}" >> $BASEPATH/config/services;
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep -c "${DATA[0]}:${DATA[1]}" ) -eq 1 ]; then
		return 1;
	else
		return 0;
	fi
}

function deleteServiceFn() {
	DATA=($2);
	if [ -f "$BASEPATH/config/services" ]; then
		sed -i "/${DATA[0]}:/d" $BASEPATH/config/services;
	fi
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep -c "${DATA[0]}:") -eq 0 ]; then
		return 1;
	else
		return 0;
	fi
}
