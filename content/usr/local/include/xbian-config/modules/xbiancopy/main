#!/bin/bash

#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# The arguments this module accepts
ARGUMENTS=(start status  imgplan imgdest imgtype getpart dodaily doweekly);

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

source $BASEPATH/modules/xbiancopy/functions
if [ $GUIMODE -eq 1 ]; then
	source $BASEPATH/modules/xbiancopy/dialogs;
fi

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|


#|------------------------------------|
#|           Main program             |
#|------------------------------------|

# Executes the GUI version of this module
function showGUIFn() {
        showConfigDialog
	if [ $? -eq 0 ]; then
            opt_img=''
            IFS=$'\n';
            DATA=($(echo -e "$RETURN"));
            IFS=$ORIGINALIFS;
            DEST=${DATA[1]}; echo "$DEST" | grep -q ^'file:' && opt_img='--img'
            DEST=${DEST##'file:'}
            [ -n "$opt_img" -o -b ${DATA[1]} ] || { showWrongBlockDev; sleep 5; showGUIFn; }
            { btrfs-auto-snapshot xbiancopy $opt_img  ${DATA[0]} "$DEST"; } >&1 2>&1 | dialog --programbox "Please wait until OK button appears"  $(tput lines) $(tput cols)
	fi
}

# Executes the command line version of this module
#  $1 Argument [String]
# status | start source destination [fs label] [[size]]
#  (for size, human readable symbols are accepted (800M, 1G, 1T...)
#
# status return code
# 1 ready
# 0 running
# -1 failed
# -2 not started
# 
# start return code
# number - pid of started backup process
# -1 failed
# -3 already running 

function showCMDFn() {
    case $1 in
        start)
            [ "$(xbian-config xbiancopy status)" -eq 0 ] && { echo "-3"; exit 0; }
            [ $# -lt 3 ] && { echo "-1"; exit 5; }
            # [ -n "$4" ] && lab="--label  
            [ -n "$5" ] && size="--size"
            echo "$3" | grep -q ^'file:' && opt_img='--img'
            dest="$3" && dest=${dest##'file:'}
            nice -n +1 /usr/sbin/btrfs-auto-snapshot xbiancopy $size $5 $opt_img $2 $dest  > /dev/null 2>&1 & pid=$!
            echo $pid > /tmp/xbiancopy.running
            echo $pid
            ;;
        status)
            [ -e /tmp/xbiancopy.running ] || { echo "-2"; exit 0; }
            if [ -e /tmp/xbiancopy.running.$(cat /tmp/xbiancopy.running) ]; then
                rm -f "/tmp/xbiancopy.running.$(cat /tmp/xbiancopy.running)"
                rm -f /tmp/xbiancopy.running
                echo "1"
            else
                kill -0 $(cat /tmp/xbiancopy.running) > /dev/null 2>&1 || { echo "-1"; rm -f /tmp/xbiancopy.running; exit 0; }
                echo "0"
            fi
            ;;
        imgplan)
            echo $(backupImgPlanFn $2)
            ;;
        imgtype)
            echo $(backupImgTypeFn $2)
            ;;
        imgdest)
            echo $(backupImgDestFn $2)
            ;;
        getpart)
            echo $(getImgPartitionsFn)
            ;;
        dodaily)
            echo $(dailySnapFn $2)
            ;;
        doweekly)
            echo $(weeklySnapFn $2)
            ;;
    esac

    exit 0
}
